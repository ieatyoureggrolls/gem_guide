#199 lines to 170(not done) LEFT OFF TRYING TO FIGURE OUT THE REMOVE_FUNC FUNCTION #Imports text coloring from termcolor import colored from colorama import Fore #Functions from Functions import label, remove_commas, remove_func, remove_punctuation, space_print #Askes user if they are using equipment as a method of earning gems method = input('Are you using equipment as a method of earning gems? ') print('') if method.lower() == 'yes': #Grabs tables from equipment.py from equipment import equipment_gems, list1, gold_costs, enchance_costs, awaken_costs #Shows awakening requirements space_print('This table shows you how much resources you need to fully awaken a piece of equipment.',2) #Askes user how much gems they need to make gem_amount = remove_commas('You get 1 gem when you awaken a piece of equipment to 5 stars. How many gems do you need? ') #plural or singular gem gem = label('gem', gem_amount) #Removes excess punctuation gem = remove_punctuation(str(gem)) #Calculates and prints the amount of resources needed to fully awaken the equipment from the dictionary #Amount of gold needed for calculation Gold = gold_costs[-1] #Calculates gold needed Gold_needed = Gold * gem_amount #Enhance stones needed for calculation Enhance = enchance_costs[-1] #Calculates enhance stones needed Enhance_needed = Enhance * gem_amount #Awakening stones needed for calculation Awakening = awaken_costs[-1] #Calculates awakening stones needed Awakening_needed = Awakening * gem_amount #Prints the amount of resources needed to fully awaken the equipment print('') Enhance_needed = label('enhance stone', Enhance_needed) Enhance_needed = remove_punctuation(Enhance_needed) #Colors resources needed Gold_needed_c = colored(('{:,}'.format(Gold_needed)), 'yellow') Awakening_needed_c = colored(('{:,}'.format(Awakening_needed)), 'blue') Enhance_needed_c = colored(Enhance_needed, 'red') print('You need', Gold_needed_c, 'gold and', Enhance_needed_c, Awakening_needed_c , 'awakening stones to fully awaken the equipment to get', gem) print('') # ask user if they want to know how much more resouces they need to fully awaken the equipment how_much = input(f'Do you want to know how much more resources you need to fully awaken the equipment and meet your {gem_amount} gem quota? ') print('') if str(how_much).lower() == 'yes': #Gets amount of resources from user while moving commas user_gold = remove_commas('How much gold do you have? ') print('') user_enhance = remove_commas('How many enhance stones do you have? ') print('') user_awakening = remove_commas('How many awakening stones do you have? ') print('') print('') #Converts labeled values to ints for calculation Enhance_needed = remove_func('label',Enhance_needed, 'int') print(Enhance_needed) big_comment = '''#calculates how much resources are needed Total_gold_needed = int(Gold_needed) - int(user_gold) Total_enhance_needed = int(Enhance_needed) - int(user_enhance) Total_awakening_needed = int(Awakening_needed) - int(user_awakening) #Sentence in form of a list. This will be used to print the amount of resources needed to fully awaken the equipment and simultaneously print surpluses, deficits and sufficients #Last part of sentence. Will never change end = f'needed to fully awaken the {gem_amount} equipment needed to get {gem}' #Variable for the sentence. Allows easy customization sentence = [] #second sentence variable so I can remove commas from the last part of the sentence only sentence_2 = [] #if statement that customizes the gold part of the sentence sen_starter = None #Sufficient if Total_gold_needed == 0: sen_starter = 'You have enough gold' sentence.append(sen_starter) else: #Deficit if Gold_needed > user_gold: sen_starter = f'You have {Gold_needed} less gold' sentence.append(sen_starter) else: #Surplus if Gold_needed < user_gold: Total_gold_needed = Total_gold_needed * -1 sen_starter = f'You have {Gold_needed} extra gold' sentence.append(sen_starter) else: pass #Sufficient if Total_enhance_needed == 0: enhance_sen = 'enough enhance stones,' sentence.append(enhance_sen) else: #Deficit if Enhance_needed > user_enhance: label('enhance stone', Enhance_needed) else: #Surplus if Total_enhance_needed < 0: #Plural or not if Total_enhance_needed * -1 == 1: enhance_sen = f'{Total_enhance_needed * -1} extra enhance stone, ' sentence.append(enhance_sen) elif Total_enhance_needed > 1: enhance_sen = f'{Total_enhance_needed * -1} extra enhance stones, ' sentence.append(enhance_sen) else: pass #Sufficient if Total_awakening_needed == 0: awakening_sen = 'and enough awakening stones' sentence_2.append(awakening_sen) else: #Deficit if Total_awakening_needed > 0: #Plural or not if Total_awakening_needed == 1: awakening_sen = f' and {Total_awakening_needed} less awakening stone' sentence_2.append(awakening_sen) elif Total_awakening_needed > 1: awakening_sen = f' and {Total_awakening_needed} less awakening stones' sentence_2.append(awakening_sen) else: #Surplus if Total_awakening_needed < 0: #Plural or not if Total_awakening_needed * -1 == 1: awakening_sen = f'and {Total_awakening_needed * -1} extra awakening stone' sentence_2.append(awakening_sen) elif Total_awakening_needed * -1 > 1: awakening_sen = f'and {Total_awakening_needed * -1} extra awakening stones' sentence_2.append(awakening_sen) else: pass sentence_2.append(end) #Converts the sentence lists to a string so Excess punctuation can be removed sentence = str(sentence) sentence_2 = str(sentence_2) #Removes excess punctuation sentence = sentence.replace('[', '') sentence = sentence.replace(']', '') sentence = sentence.replace("'", '') sentence = sentence.replace(')', '') sentence = sentence.replace('(', '') sentence_2 = sentence_2.replace(',', '') sentence_2 = sentence_2.replace('[', '') sentence_2 = sentence_2.replace(']', '') sentence_2 = sentence_2.replace("'", '') sentence_2 = sentence_2.replace(')', '') sentence_2 = sentence_2.replace('(', '') #Prints sentence print(sentence + sentence_2)'''
